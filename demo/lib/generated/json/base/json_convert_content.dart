// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart';
import 'package:demo/page/kitchen/model/detail_model_entity.dart';
import 'package:demo/page/kitchen/model/recommend_model_entity.dart';
import 'package:demo/page/kitchen/model/search_keyword_model_entity.dart';
import 'package:demo/page/kitchen/model/video_model_entity.dart';

JsonConvert jsonConvert = JsonConvert();
typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);

class JsonConvert {
	static final Map<String, JsonConvertFunction> _convertFuncMap = {
		(DetailModelEntity).toString(): DetailModelEntity.fromJson,
		(DetailModelContent).toString(): DetailModelContent.fromJson,
		(DetailModelContentRecipe).toString(): DetailModelContentRecipe.fromJson,
		(DetailModelContentRecipeImage).toString(): DetailModelContentRecipeImage.fromJson,
		(DetailModelContentRecipeMinorAuthor).toString(): DetailModelContentRecipeMinorAuthor.fromJson,
		(DetailModelContentRecipeAdaptation).toString(): DetailModelContentRecipeAdaptation.fromJson,
		(DetailModelContentRecipeAuthor).toString(): DetailModelContentRecipeAuthor.fromJson,
		(DetailModelContentRecipeAuthorImage).toString(): DetailModelContentRecipeAuthorImage.fromJson,
		(DetailModelContentRecipeAuthorLabels).toString(): DetailModelContentRecipeAuthorLabels.fromJson,
		(DetailModelContentRecipeIngredient).toString(): DetailModelContentRecipeIngredient.fromJson,
		(DetailModelContentRecipeInstruction).toString(): DetailModelContentRecipeInstruction.fromJson,
		(DetailModelContentRecipeInstructionVideo).toString(): DetailModelContentRecipeInstructionVideo.fromJson,
		(DetailModelContentRecipeInstructionImage).toString(): DetailModelContentRecipeInstructionImage.fromJson,
		(DetailModelContentRecipeStats).toString(): DetailModelContentRecipeStats.fromJson,
		(DetailModelContentRecipeEquipmentRelatedInfo).toString(): DetailModelContentRecipeEquipmentRelatedInfo.fromJson,
		(DetailModelContentRecipePurchaseButton).toString(): DetailModelContentRecipePurchaseButton.fromJson,
		(DetailModelContentRecipeCoverMicroVideo).toString(): DetailModelContentRecipeCoverMicroVideo.fromJson,
		(DetailModelContentRecipeVodVideo).toString(): DetailModelContentRecipeVodVideo.fromJson,
		(RecommendModelEntity).toString(): RecommendModelEntity.fromJson,
		(RecommendModelRecommendations).toString(): RecommendModelRecommendations.fromJson,
		(RecommendModelRecommendationsObject).toString(): RecommendModelRecommendationsObject.fromJson,
		(RecommendModelRecommendationsObjectImage).toString(): RecommendModelRecommendationsObjectImage.fromJson,
		(RecommendModelRecommendationsObjectAuthor).toString(): RecommendModelRecommendationsObjectAuthor.fromJson,
		(RecommendModelRecommendationsObjectAuthorImage).toString(): RecommendModelRecommendationsObjectAuthorImage.fromJson,
		(RecommendModelRecommendationsObjectExtra).toString(): RecommendModelRecommendationsObjectExtra.fromJson,
		(RecommendModelRecommendationsObjectTargetInfo).toString(): RecommendModelRecommendationsObjectTargetInfo.fromJson,
		(RecommendModelRecommendationsTracking).toString(): RecommendModelRecommendationsTracking.fromJson,
		(RecommendModelRecommendationsSensorTracking).toString(): RecommendModelRecommendationsSensorTracking.fromJson,
		(RecommendModelRecommendationsSensorTrackingImpression).toString(): RecommendModelRecommendationsSensorTrackingImpression.fromJson,
		(RecommendModelRecommendationsSensorTrackingImpressionProperties).toString(): RecommendModelRecommendationsSensorTrackingImpressionProperties.fromJson,
		(RecommendModelRecommendationsSensorTrackingClick).toString(): RecommendModelRecommendationsSensorTrackingClick.fromJson,
		(RecommendModelRecommendationsSensorTrackingClickProperties).toString(): RecommendModelRecommendationsSensorTrackingClickProperties.fromJson,
		(RecommendModelRecommendationsPlaceholder).toString(): RecommendModelRecommendationsPlaceholder.fromJson,
		(SearchKeywordModelEntity).toString(): SearchKeywordModelEntity.fromJson,
		(VideoModelEntity).toString(): VideoModelEntity.fromJson,
		(VideoModelPortals).toString(): VideoModelPortals.fromJson,
		(VideoModelPortalsObject).toString(): VideoModelPortalsObject.fromJson,
		(VideoModelPortalsObjectImage).toString(): VideoModelPortalsObjectImage.fromJson,
		(VideoModelPortalsTracking).toString(): VideoModelPortalsTracking.fromJson,
		(VideoModelContent).toString(): VideoModelContent.fromJson,
		(VideoModelContentRecommendations).toString(): VideoModelContentRecommendations.fromJson,
		(VideoModelContentRecommendationsRecommendContent).toString(): VideoModelContentRecommendationsRecommendContent.fromJson,
		(VideoModelContentRecommendationsRecommendContentImage).toString(): VideoModelContentRecommendationsRecommendContentImage.fromJson,
		(VideoModelContentRecommendationsRecommendContentAuthor).toString(): VideoModelContentRecommendationsRecommendContentAuthor.fromJson,
		(VideoModelContentRecommendationsRecommendContentAuthorImage).toString(): VideoModelContentRecommendationsRecommendContentAuthorImage.fromJson,
		(VideoModelContentRecommendationsRecommendContentExtra).toString(): VideoModelContentRecommendationsRecommendContentExtra.fromJson,
		(VideoModelContentRecommendationsRecommendContentTargetInfo).toString(): VideoModelContentRecommendationsRecommendContentTargetInfo.fromJson,
		(VideoModelContentRecommendationsTracking).toString(): VideoModelContentRecommendationsTracking.fromJson,
		(VideoModelContentRecommendationsSensorTracking).toString(): VideoModelContentRecommendationsSensorTracking.fromJson,
		(VideoModelContentRecommendationsSensorTrackingDigg).toString(): VideoModelContentRecommendationsSensorTrackingDigg.fromJson,
		(VideoModelContentRecommendationsSensorTrackingDiggProperties).toString(): VideoModelContentRecommendationsSensorTrackingDiggProperties.fromJson,
	};

  T? convert<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    return asT<T>(value);
  }

  List<T?>? convertList<T>(List<dynamic>? value) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => asT<T>(e)).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) => asT<T>(e)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  T? asT<T extends Object?>(dynamic value) {
    if (value is T) {
      return value;
    }
    final String type = T.toString();
    try {
      final String valueS = value.toString();
      if (type == "String") {
        return valueS as T;
      } else if (type == "int") {
        final int? intValue = int.tryParse(valueS);
        if (intValue == null) {
          return double.tryParse(valueS)?.toInt() as T?;
        } else {
          return intValue as T;
        }
      } else if (type == "double") {
        return double.parse(valueS) as T;
      } else if (type == "DateTime") {
        return DateTime.parse(valueS) as T;
      } else if (type == "bool") {
        if (valueS == '0' || valueS == '1') {
          return (valueS == '1') as T;
        }
        return (valueS == 'true') as T;
      } else if (type == "Map" || type.startsWith("Map<")) {
        return value as T;
      } else {
        if (_convertFuncMap.containsKey(type)) {
          return _convertFuncMap[type]!(value) as T;
        } else {
          throw UnimplementedError('$type unimplemented');
        }
      }
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return null;
    }
  }

	//list is returned by type
	static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
		if(<DetailModelEntity>[] is M){
			return data.map<DetailModelEntity>((Map<String, dynamic> e) => DetailModelEntity.fromJson(e)).toList() as M;
		}
		if(<DetailModelContent>[] is M){
			return data.map<DetailModelContent>((Map<String, dynamic> e) => DetailModelContent.fromJson(e)).toList() as M;
		}
		if(<DetailModelContentRecipe>[] is M){
			return data.map<DetailModelContentRecipe>((Map<String, dynamic> e) => DetailModelContentRecipe.fromJson(e)).toList() as M;
		}
		if(<DetailModelContentRecipeImage>[] is M){
			return data.map<DetailModelContentRecipeImage>((Map<String, dynamic> e) => DetailModelContentRecipeImage.fromJson(e)).toList() as M;
		}
		if(<DetailModelContentRecipeMinorAuthor>[] is M){
			return data.map<DetailModelContentRecipeMinorAuthor>((Map<String, dynamic> e) => DetailModelContentRecipeMinorAuthor.fromJson(e)).toList() as M;
		}
		if(<DetailModelContentRecipeAdaptation>[] is M){
			return data.map<DetailModelContentRecipeAdaptation>((Map<String, dynamic> e) => DetailModelContentRecipeAdaptation.fromJson(e)).toList() as M;
		}
		if(<DetailModelContentRecipeAuthor>[] is M){
			return data.map<DetailModelContentRecipeAuthor>((Map<String, dynamic> e) => DetailModelContentRecipeAuthor.fromJson(e)).toList() as M;
		}
		if(<DetailModelContentRecipeAuthorImage>[] is M){
			return data.map<DetailModelContentRecipeAuthorImage>((Map<String, dynamic> e) => DetailModelContentRecipeAuthorImage.fromJson(e)).toList() as M;
		}
		if(<DetailModelContentRecipeAuthorLabels>[] is M){
			return data.map<DetailModelContentRecipeAuthorLabels>((Map<String, dynamic> e) => DetailModelContentRecipeAuthorLabels.fromJson(e)).toList() as M;
		}
		if(<DetailModelContentRecipeIngredient>[] is M){
			return data.map<DetailModelContentRecipeIngredient>((Map<String, dynamic> e) => DetailModelContentRecipeIngredient.fromJson(e)).toList() as M;
		}
		if(<DetailModelContentRecipeInstruction>[] is M){
			return data.map<DetailModelContentRecipeInstruction>((Map<String, dynamic> e) => DetailModelContentRecipeInstruction.fromJson(e)).toList() as M;
		}
		if(<DetailModelContentRecipeInstructionVideo>[] is M){
			return data.map<DetailModelContentRecipeInstructionVideo>((Map<String, dynamic> e) => DetailModelContentRecipeInstructionVideo.fromJson(e)).toList() as M;
		}
		if(<DetailModelContentRecipeInstructionImage>[] is M){
			return data.map<DetailModelContentRecipeInstructionImage>((Map<String, dynamic> e) => DetailModelContentRecipeInstructionImage.fromJson(e)).toList() as M;
		}
		if(<DetailModelContentRecipeStats>[] is M){
			return data.map<DetailModelContentRecipeStats>((Map<String, dynamic> e) => DetailModelContentRecipeStats.fromJson(e)).toList() as M;
		}
		if(<DetailModelContentRecipeEquipmentRelatedInfo>[] is M){
			return data.map<DetailModelContentRecipeEquipmentRelatedInfo>((Map<String, dynamic> e) => DetailModelContentRecipeEquipmentRelatedInfo.fromJson(e)).toList() as M;
		}
		if(<DetailModelContentRecipePurchaseButton>[] is M){
			return data.map<DetailModelContentRecipePurchaseButton>((Map<String, dynamic> e) => DetailModelContentRecipePurchaseButton.fromJson(e)).toList() as M;
		}
		if(<DetailModelContentRecipeCoverMicroVideo>[] is M){
			return data.map<DetailModelContentRecipeCoverMicroVideo>((Map<String, dynamic> e) => DetailModelContentRecipeCoverMicroVideo.fromJson(e)).toList() as M;
		}
		if(<DetailModelContentRecipeVodVideo>[] is M){
			return data.map<DetailModelContentRecipeVodVideo>((Map<String, dynamic> e) => DetailModelContentRecipeVodVideo.fromJson(e)).toList() as M;
		}
		if(<RecommendModelEntity>[] is M){
			return data.map<RecommendModelEntity>((Map<String, dynamic> e) => RecommendModelEntity.fromJson(e)).toList() as M;
		}
		if(<RecommendModelRecommendations>[] is M){
			return data.map<RecommendModelRecommendations>((Map<String, dynamic> e) => RecommendModelRecommendations.fromJson(e)).toList() as M;
		}
		if(<RecommendModelRecommendationsObject>[] is M){
			return data.map<RecommendModelRecommendationsObject>((Map<String, dynamic> e) => RecommendModelRecommendationsObject.fromJson(e)).toList() as M;
		}
		if(<RecommendModelRecommendationsObjectImage>[] is M){
			return data.map<RecommendModelRecommendationsObjectImage>((Map<String, dynamic> e) => RecommendModelRecommendationsObjectImage.fromJson(e)).toList() as M;
		}
		if(<RecommendModelRecommendationsObjectAuthor>[] is M){
			return data.map<RecommendModelRecommendationsObjectAuthor>((Map<String, dynamic> e) => RecommendModelRecommendationsObjectAuthor.fromJson(e)).toList() as M;
		}
		if(<RecommendModelRecommendationsObjectAuthorImage>[] is M){
			return data.map<RecommendModelRecommendationsObjectAuthorImage>((Map<String, dynamic> e) => RecommendModelRecommendationsObjectAuthorImage.fromJson(e)).toList() as M;
		}
		if(<RecommendModelRecommendationsObjectExtra>[] is M){
			return data.map<RecommendModelRecommendationsObjectExtra>((Map<String, dynamic> e) => RecommendModelRecommendationsObjectExtra.fromJson(e)).toList() as M;
		}
		if(<RecommendModelRecommendationsObjectTargetInfo>[] is M){
			return data.map<RecommendModelRecommendationsObjectTargetInfo>((Map<String, dynamic> e) => RecommendModelRecommendationsObjectTargetInfo.fromJson(e)).toList() as M;
		}
		if(<RecommendModelRecommendationsTracking>[] is M){
			return data.map<RecommendModelRecommendationsTracking>((Map<String, dynamic> e) => RecommendModelRecommendationsTracking.fromJson(e)).toList() as M;
		}
		if(<RecommendModelRecommendationsSensorTracking>[] is M){
			return data.map<RecommendModelRecommendationsSensorTracking>((Map<String, dynamic> e) => RecommendModelRecommendationsSensorTracking.fromJson(e)).toList() as M;
		}
		if(<RecommendModelRecommendationsSensorTrackingImpression>[] is M){
			return data.map<RecommendModelRecommendationsSensorTrackingImpression>((Map<String, dynamic> e) => RecommendModelRecommendationsSensorTrackingImpression.fromJson(e)).toList() as M;
		}
		if(<RecommendModelRecommendationsSensorTrackingImpressionProperties>[] is M){
			return data.map<RecommendModelRecommendationsSensorTrackingImpressionProperties>((Map<String, dynamic> e) => RecommendModelRecommendationsSensorTrackingImpressionProperties.fromJson(e)).toList() as M;
		}
		if(<RecommendModelRecommendationsSensorTrackingClick>[] is M){
			return data.map<RecommendModelRecommendationsSensorTrackingClick>((Map<String, dynamic> e) => RecommendModelRecommendationsSensorTrackingClick.fromJson(e)).toList() as M;
		}
		if(<RecommendModelRecommendationsSensorTrackingClickProperties>[] is M){
			return data.map<RecommendModelRecommendationsSensorTrackingClickProperties>((Map<String, dynamic> e) => RecommendModelRecommendationsSensorTrackingClickProperties.fromJson(e)).toList() as M;
		}
		if(<RecommendModelRecommendationsPlaceholder>[] is M){
			return data.map<RecommendModelRecommendationsPlaceholder>((Map<String, dynamic> e) => RecommendModelRecommendationsPlaceholder.fromJson(e)).toList() as M;
		}
		if(<SearchKeywordModelEntity>[] is M){
			return data.map<SearchKeywordModelEntity>((Map<String, dynamic> e) => SearchKeywordModelEntity.fromJson(e)).toList() as M;
		}
		if(<VideoModelEntity>[] is M){
			return data.map<VideoModelEntity>((Map<String, dynamic> e) => VideoModelEntity.fromJson(e)).toList() as M;
		}
		if(<VideoModelPortals>[] is M){
			return data.map<VideoModelPortals>((Map<String, dynamic> e) => VideoModelPortals.fromJson(e)).toList() as M;
		}
		if(<VideoModelPortalsObject>[] is M){
			return data.map<VideoModelPortalsObject>((Map<String, dynamic> e) => VideoModelPortalsObject.fromJson(e)).toList() as M;
		}
		if(<VideoModelPortalsObjectImage>[] is M){
			return data.map<VideoModelPortalsObjectImage>((Map<String, dynamic> e) => VideoModelPortalsObjectImage.fromJson(e)).toList() as M;
		}
		if(<VideoModelPortalsTracking>[] is M){
			return data.map<VideoModelPortalsTracking>((Map<String, dynamic> e) => VideoModelPortalsTracking.fromJson(e)).toList() as M;
		}
		if(<VideoModelContent>[] is M){
			return data.map<VideoModelContent>((Map<String, dynamic> e) => VideoModelContent.fromJson(e)).toList() as M;
		}
		if(<VideoModelContentRecommendations>[] is M){
			return data.map<VideoModelContentRecommendations>((Map<String, dynamic> e) => VideoModelContentRecommendations.fromJson(e)).toList() as M;
		}
		if(<VideoModelContentRecommendationsRecommendContent>[] is M){
			return data.map<VideoModelContentRecommendationsRecommendContent>((Map<String, dynamic> e) => VideoModelContentRecommendationsRecommendContent.fromJson(e)).toList() as M;
		}
		if(<VideoModelContentRecommendationsRecommendContentImage>[] is M){
			return data.map<VideoModelContentRecommendationsRecommendContentImage>((Map<String, dynamic> e) => VideoModelContentRecommendationsRecommendContentImage.fromJson(e)).toList() as M;
		}
		if(<VideoModelContentRecommendationsRecommendContentAuthor>[] is M){
			return data.map<VideoModelContentRecommendationsRecommendContentAuthor>((Map<String, dynamic> e) => VideoModelContentRecommendationsRecommendContentAuthor.fromJson(e)).toList() as M;
		}
		if(<VideoModelContentRecommendationsRecommendContentAuthorImage>[] is M){
			return data.map<VideoModelContentRecommendationsRecommendContentAuthorImage>((Map<String, dynamic> e) => VideoModelContentRecommendationsRecommendContentAuthorImage.fromJson(e)).toList() as M;
		}
		if(<VideoModelContentRecommendationsRecommendContentExtra>[] is M){
			return data.map<VideoModelContentRecommendationsRecommendContentExtra>((Map<String, dynamic> e) => VideoModelContentRecommendationsRecommendContentExtra.fromJson(e)).toList() as M;
		}
		if(<VideoModelContentRecommendationsRecommendContentTargetInfo>[] is M){
			return data.map<VideoModelContentRecommendationsRecommendContentTargetInfo>((Map<String, dynamic> e) => VideoModelContentRecommendationsRecommendContentTargetInfo.fromJson(e)).toList() as M;
		}
		if(<VideoModelContentRecommendationsTracking>[] is M){
			return data.map<VideoModelContentRecommendationsTracking>((Map<String, dynamic> e) => VideoModelContentRecommendationsTracking.fromJson(e)).toList() as M;
		}
		if(<VideoModelContentRecommendationsSensorTracking>[] is M){
			return data.map<VideoModelContentRecommendationsSensorTracking>((Map<String, dynamic> e) => VideoModelContentRecommendationsSensorTracking.fromJson(e)).toList() as M;
		}
		if(<VideoModelContentRecommendationsSensorTrackingDigg>[] is M){
			return data.map<VideoModelContentRecommendationsSensorTrackingDigg>((Map<String, dynamic> e) => VideoModelContentRecommendationsSensorTrackingDigg.fromJson(e)).toList() as M;
		}
		if(<VideoModelContentRecommendationsSensorTrackingDiggProperties>[] is M){
			return data.map<VideoModelContentRecommendationsSensorTrackingDiggProperties>((Map<String, dynamic> e) => VideoModelContentRecommendationsSensorTrackingDiggProperties.fromJson(e)).toList() as M;
		}

		debugPrint("${M.toString()} not found");
	
		return null;
}

	static M? fromJsonAsT<M>(dynamic json) {
		if (json is List) {
			return _getListChildType<M>(json.map((e) => e as Map<String, dynamic>).toList());
		} else {
			return jsonConvert.asT<M>(json);
		}
	}
}